name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22.11.0'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:js

      - name: Run Markdown linting
        run: npm run lint:md

      - name: Check TypeScript types
        run: npm run typecheck

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for known vulnerabilities
        run: npm audit --audit-level=moderate --parseable

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['22.x']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Validate CLI tools
        run: |
          node scripts/create-project.js --help
          node scripts/setup-standards.js --help || true

      - name: Test CLI functionality
        run: |
          mkdir -p /tmp/test-project
          cd /tmp/test-project
          npm init -y
          node $GITHUB_WORKSPACE/scripts/setup-standards.js .

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run E2E tests
        run: npm run test:e2e || npm test -- --testPathPattern=e2e

      - name: Test project creation workflow
        run: |
          mkdir -p /tmp/e2e-test
          cd /tmp/e2e-test
          node $GITHUB_WORKSPACE/scripts/create-project.js test-api --template microservice
          cd test-api
          npm test || echo "No tests to run"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Create tag if it doesn't exist
          if ! git tag --list | grep -q "v$CURRENT_VERSION"; then
            git tag "v$CURRENT_VERSION"
            git push origin "v$CURRENT_VERSION"
            
            # Create GitHub release
            gh release create "v$CURRENT_VERSION" \
              --title "Release v$CURRENT_VERSION" \
              --notes "Automated release from CI/CD pipeline" \
              --latest
          fi

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.release.result == 'success'
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Release created and published."

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Please check the logs for more information."