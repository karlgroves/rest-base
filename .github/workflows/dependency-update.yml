name: Automated Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11.0'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        id: outdated
        run: |
          # Check for outdated packages and capture output
          OUTDATED=$(npm outdated --json || echo '{}')
          echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT
          
          # Count outdated packages
          COUNT=$(echo "$OUTDATED" | jq 'length // 0')
          echo "count=$COUNT" >> $GITHUB_OUTPUT
          
          echo "Found $COUNT outdated packages"

      - name: Update patch and minor versions
        if: steps.outdated.outputs.count > 0
        run: |
          # Update patch and minor versions (avoid major version updates)
          npm update
          
          # Also update dev dependencies
          npm update --dev

      - name: Run security audit and fix
        run: |
          # Fix security vulnerabilities
          npm audit fix || true

      - name: Run tests to ensure updates work
        run: |
          npm test
          npm run lint || true

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet package-lock.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No dependency changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Dependencies were updated"
            
            # Get list of updated packages for PR description
            git diff --name-only > changes.txt
            echo "Files changed:" >> pr_body.txt
            cat changes.txt >> pr_body.txt
            echo "" >> pr_body.txt
            
            # Get commit details
            echo "## Package Updates" >> pr_body.txt
            if npm outdated --json > outdated.json 2>/dev/null; then
              echo "The following packages were updated:" >> pr_body.txt
              jq -r 'to_entries[] | "- **\(.key)**: \(.value.current) â†’ \(.value.wanted)"' outdated.json >> pr_body.txt || true
            fi
            
            echo "" >> pr_body.txt
            echo "This PR was automatically generated by the dependency update workflow." >> pr_body.txt
            echo "Please review the changes and ensure all tests pass before merging." >> pr_body.txt
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update dependencies
            
            - Update patch and minor versions
            - Fix security vulnerabilities
            - Automated update via GitHub Actions
          title: "chore: Automated dependency updates"
          body-path: pr_body.txt
          branch: dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated
          reviewers: |
            karlgroves

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          # Run audit and capture results
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          VULN_COUNT=$(jq '.metadata.vulnerabilities.total // 0' audit-results.json)
          
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "ðŸš¨ Found $VULN_COUNT security vulnerabilities!"
            
            # Create issue body
            echo "# Security Vulnerabilities Detected" > issue_body.txt
            echo "" >> issue_body.txt
            echo "The automated security audit found **$VULN_COUNT** vulnerabilities in our dependencies." >> issue_body.txt
            echo "" >> issue_body.txt
            echo "## Summary" >> issue_body.txt
            
            # Extract vulnerability details
            jq -r '.vulnerabilities | to_entries[] | "### \(.key)\n- **Severity**: \(.value.severity)\n- **Range**: \(.value.range)\n- **Via**: \(.value.via | if type == "array" then join(", ") else . end)\n"' audit-results.json >> issue_body.txt || true
            
            echo "" >> issue_body.txt
            echo "## Action Required" >> issue_body.txt
            echo "Please run \`npm audit fix\` to resolve these vulnerabilities." >> issue_body.txt
            echo "" >> issue_body.txt
            echo "This issue was automatically created by the security audit workflow." >> issue_body.txt
            
            # Create security issue
            gh issue create \
              --title "ðŸš¨ Security vulnerabilities detected in dependencies" \
              --body-file issue_body.txt \
              --label "security,dependencies,automated" \
              --assignee karlgroves
          else
            echo "âœ… No security vulnerabilities found!"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}