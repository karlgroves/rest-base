name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run lint
          npm run typecheck
          npm test
          npm run test:coverage

      - name: Check for breaking changes
        run: |
          # Compare with base branch to detect potential breaking changes
          git fetch origin ${{ github.base_ref }}
          
          # Check if any public APIs have changed
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          echo "Files changed in this PR:"
          echo "$CHANGED_FILES"
          
          # Check for changes in public API files
          if echo "$CHANGED_FILES" | grep -E "(package\.json|shared/.*\.js|scripts/.*\.js)"; then
            echo "⚠️ Public API files have been modified"
            echo "breaking_changes=true" >> $GITHUB_ENV
          else
            echo "✅ No public API changes detected"
            echo "breaking_changes=false" >> $GITHUB_ENV
          fi

      - name: Validate commit messages
        run: |
          # Get commits in this PR
          COMMITS=$(git log --pretty=format:"%s" origin/${{ github.base_ref }}..HEAD)
          
          echo "Commit messages in this PR:"
          echo "$COMMITS"
          
          # Check conventional commit format
          INVALID_COMMITS=""
          while IFS= read -r commit; do
            if ! echo "$commit" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
              INVALID_COMMITS="$INVALID_COMMITS\n- $commit"
            fi
          done <<< "$COMMITS"
          
          if [ -n "$INVALID_COMMITS" ]; then
            echo "❌ Invalid commit messages found:"
            echo -e "$INVALID_COMMITS"
            echo "Please use conventional commit format: type(scope): description"
            exit 1
          else
            echo "✅ All commit messages follow conventional format"
          fi

      - name: Check code coverage
        id: coverage
        run: |
          # Extract coverage percentage
          COVERAGE=$(npm run test:coverage | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | tail -1)
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          
          # Set minimum coverage threshold
          THRESHOLD=80
          
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Code coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
            exit 1
          else
            echo "✅ Code coverage ($COVERAGE%) meets threshold ($THRESHOLD%)"
          fi

      - name: Add PR comment with results
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const breakingChanges = '${{ env.breaking_changes }}';
            
            let comment = '## 🤖 Automated PR Review\n\n';
            comment += `### Code Coverage: ${coverage}%\n`;
            comment += coverage >= 80 ? '✅ ' : '❌ ';
            comment += `Coverage ${coverage >= 80 ? 'meets' : 'below'} threshold (80%)\n\n`;
            
            if (breakingChanges === 'true') {
              comment += '### ⚠️ Potential Breaking Changes\n';
              comment += 'This PR modifies public API files. Please ensure:\n';
              comment += '- Version is bumped appropriately\n';
              comment += '- Breaking changes are documented\n';
              comment += '- Migration guide is provided if needed\n\n';
            }
            
            comment += '### ✅ All automated checks passed!\n';
            comment += 'This PR is ready for manual review.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  auto-merge:
    name: Auto-merge dependabot PRs
    runs-on: ubuntu-latest
    needs: pr-checks
    if: |
      github.actor == 'dependabot[bot]' &&
      github.event.pull_request.draft == false &&
      contains(github.event.pull_request.labels.*.name, 'dependencies')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable auto-merge for dependabot PRs
        run: |
          # Auto-approve and merge dependabot PRs if they pass all checks
          gh pr review --approve "${{ github.event.pull_request.number }}" --body "Auto-approving dependabot PR"
          gh pr merge --auto --squash "${{ github.event.pull_request.number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  label-pr:
    name: Auto-label PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto-assign labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            
            // Get changed files
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: number
            });
            
            const changedFiles = files.data.map(file => file.filename);
            const labels = [];
            
            // Auto-assign labels based on changed files
            if (changedFiles.some(file => file.includes('test'))) {
              labels.push('tests');
            }
            
            if (changedFiles.some(file => file.endsWith('.md'))) {
              labels.push('documentation');
            }
            
            if (changedFiles.some(file => file.includes('script'))) {
              labels.push('scripts');
            }
            
            if (changedFiles.some(file => file.includes('.github'))) {
              labels.push('ci/cd');
            }
            
            if (changedFiles.some(file => file.includes('package.json'))) {
              labels.push('dependencies');
            }
            
            if (changedFiles.some(file => file.includes('security') || file.includes('audit'))) {
              labels.push('security');
            }
            
            // Check for breaking changes
            const title = context.payload.pull_request.title.toLowerCase();
            if (title.includes('breaking') || title.includes('major')) {
              labels.push('breaking-change');
            }
            
            // Add size label based on changes
            const totalChanges = files.data.reduce((sum, file) => sum + file.changes, 0);
            if (totalChanges < 10) {
              labels.push('size/XS');
            } else if (totalChanges < 50) {
              labels.push('size/S');
            } else if (totalChanges < 200) {
              labels.push('size/M');
            } else if (totalChanges < 500) {
              labels.push('size/L');
            } else {
              labels.push('size/XL');
            }
            
            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels
              });
            }