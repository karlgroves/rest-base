name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '22.11.0'

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Extract version from tag
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Use input version
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          # Validate version format
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$'; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [validate-version]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Build project
        run: npm run build

      - name: Validate build artifacts
        run: |
          # Check that all required files exist
          for file in package.json README.md LICENSE; do
            if [ ! -f "$file" ]; then
              echo "Required file missing: $file"
              exit 1
            fi
          done

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test]
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Update package version
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          npm version $VERSION --no-git-tag-version
          
          # Update version in related files if needed
          if [ -f "src/version.js" ]; then
            echo "export const VERSION = '$VERSION';" > src/version.js
          fi

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Generate changelog from commits
          echo "# Release Notes for v$VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## What's Changed" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            git log --pretty=format:"* %s (%h)" >> RELEASE_NOTES.md
          else
            git log $LAST_TAG..HEAD --pretty=format:"* %s (%h)" >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$VERSION" >> RELEASE_NOTES.md

      - name: Create release archive
        run: |
          # Create distribution directory
          mkdir -p dist
          
          # Copy necessary files
          cp -r scripts shared templates *.md *.json .eslintrc.js .gitignore dist/
          
          # Create tarball
          tar -czf rest-spec-v${{ needs.validate-version.outputs.version }}.tar.gz -C dist .
          
          # Create zip
          cd dist && zip -r ../rest-spec-v${{ needs.validate-version.outputs.version }}.zip . && cd ..

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          release_name: REST-SPEC v${{ needs.validate-version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./rest-spec-v${{ needs.validate-version.outputs.version }}.tar.gz
          asset_name: rest-spec-v${{ needs.validate-version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload zip asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./rest-spec-v${{ needs.validate-version.outputs.version }}.zip
          asset_name: rest-spec-v${{ needs.validate-version.outputs.version }}.zip
          asset_content_type: application/zip

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [create-release]
    if: ${{ !github.event.inputs.prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Update version
        run: npm version ${{ needs.validate-version.outputs.version }} --no-git-tag-version

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR for version bump
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: bump version to ${{ needs.validate-version.outputs.version }}
            
            - Update package.json version
            - Update related version files
            - Post-release version bump
          title: "chore: Post-release version bump for v${{ needs.validate-version.outputs.version }}"
          body: |
            This PR updates the version number after the v${{ needs.validate-version.outputs.version }} release.
            
            ## Changes
            - Updated package.json version
            - Updated any related version files
            
            This is an automated PR created by the release workflow.
          branch: release/post-v${{ needs.validate-version.outputs.version }}
          delete-branch: true
          labels: |
            release
            automated

      - name: Notify team
        run: |
          echo "Release v${{ needs.validate-version.outputs.version }} completed successfully!"
          echo "GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-version.outputs.version }}"
          
          # You can add Slack/Discord/Email notifications here

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
      - name: Cleanup workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10